version: "3.9"

volumes:
  cert:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: "${cert}"
    name: ${volume_cert}
  data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: "${data}"
    name: ${volume_data}
  centos:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: "${centos}"
    name: ${volume_centos}
  debian:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: "${debian}"
    name: ${volume_debian}
  ubuntu:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: "${ubuntu}"
    name: ${volume_ubuntu}

services:
  jenkins:
    build:
      context: "${context}"
      dockerfile: "jenkins.Dockerfile"
    container_name: "${container}"
    env_file: ./.env
    image: "jenkins-blueocean"
    networks: 
      - net
    ports:
      - "${http_port}:8080/tcp"
      - "${agent_port}:50000/tcp"
    privileged: true
    restart: on-failure
    user: root
    volumes:
      - data:${JENKINS_HOME}
    working_dir: "${JENKINS_HOME}"
  docker-dind:
    container_name: "${container}-docker"
    image: "docker:dind"
    env_file: ./.env
    networks: 
      - net
    ports:
      - "${docker_port}:${docker_port}/tcp"
    privileged: true
    user: root
    volumes:
      - cert:${DOCKER_TLS_CERTDIR}
      - data:${JENKINS_HOME}
  centos:
    build:
      args:
        - key=jkey
        - username=centos
      context: "${context}"
      dockerfile: "centos.Dockerfile"
    container_name: "${container}-centos"
    image: "centos/ssh:7"
    env_file: ./.env
    networks: 
      - net
    volumes:
      - centos:${centos}
  debian:
    build:
      args:
        - key=jkey
        - username=debian
      context: "${context}"
      dockerfile: "debian.Dockerfile"
    container_name: "${container}-debian"
    image: "debian/ssh:11"
    env_file: ./.env
    networks: 
      - net
    volumes:
      - debian:${debian}
  ubuntu:
    build:
      args:
        - key=jkey
        - username=ubuntu
      context: "${context}"
      dockerfile: "ubuntu.Dockerfile"
    container_name: "${container}-ubuntu"
    image: "ubuntu/ssh:22.04"
    env_file: ./.env
    networks: 
      - net
    volumes:
      - ubuntu:${ubuntu}

networks: 
    net:
      driver: bridge
